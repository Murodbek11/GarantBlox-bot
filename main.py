import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
from aiogram import Router

TOKEN = "7377520849:AAE90iBIivs3iExzl1mm6QxwTt0MYDSG08I"
CHANNEL_ID = '@GarantBlox'
LOG_CHANNEL_ID = '@GarantBlox_logs'
ADMIN_ID = 1725224593

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)
router = Router()
dp.include_router(router)

DATA_DIR = "data"
ORDERS_FILE = os.path.join(DATA_DIR, "orders.json")
FEEDBACKS_FILE = os.path.join(DATA_DIR, "feedbacks.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
REFERRALS_FILE = os.path.join(DATA_DIR, "referrals.json")

def load_json(filename, default):
    if not os.path.exists(filename):
        return default
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

def save_json(filename, data):
    os.makedirs(DATA_DIR, exist_ok=True)
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

orders = load_json(ORDERS_FILE, {})
feedbacks = load_json(FEEDBACKS_FILE, [])
users = set(load_json(USERS_FILE, []))
referrals = load_json(REFERRALS_FILE, {})

feedback_waiting = set()
order_steps = {}
order_data = {}

async def handle(request):
    return web.Response(text="I'm alive!")

app = web.Application()
app.add_routes([web.get("/", handle)])

def save_all():
    save_json(ORDERS_FILE, orders)
    save_json(FEEDBACKS_FILE, feedbacks)
    save_json(USERS_FILE, list(users))
    save_json(REFERRALS_FILE, referrals)

@router.message(Command("start"))
async def start(message: Message, command: Command.Object):
    user_id = message.from_user.id
    users.add(user_id)

    if command.args and command.args.startswith("ref_"):
        try:
            inviter_id = int(command.args.split("_")[1])
            if inviter_id != user_id and str(user_id) not in referrals.get(str(inviter_id), []):
                referrals.setdefault(str(inviter_id), []).append(str(user_id))
        except Exception:
            pass

    save_all()

    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    keyboard.add(types.KeyboardButton(text="üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É"))
    keyboard.add(types.KeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã"))
    keyboard.add(types.KeyboardButton(text="üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
    keyboard.add(types.KeyboardButton(text="üßæ –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

@router.message(lambda m: m.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_feedback(message: Message):
    feedback_waiting.add(message.chat.id)
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–Ω –ø–æ–ø–∞–¥—ë—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

@router.message(lambda m: m.text == "üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É")
async def start_order(message: Message):
    order_steps[message.chat.id] = 0
    order_data[message.chat.id] = {}
    await message.answer("üìã –®–∞–≥ 1/4: –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —É –≥–∞—Ä–∞–Ω—Ç–∞?")

@router.message(lambda m: m.text == "üìñ –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã")
async def send_last_feedbacks(message: Message):
    approved = [f for f in feedbacks if f.get('status') == 'approved']
    if not approved:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
        return
    last_10 = approved[-10:]
    text = "üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n" + "\n\n".join(
        f"@{f['user']}: {f['text']}" for f in last_10
    )
    await message.answer(text)

@router.message(lambda m: m.text == "üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def user_orders_status(message: Message):
    user_id = message.from_user.id
    user_orders = [o for o in orders.values() if o['from_id'] == user_id]
    if not user_orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    lines = []
    for o in user_orders:
        status = o['status']
        data = o['data']
        desc = data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        lines.append(f"–ó–∞–∫–∞–∑: {desc}\n–°—Ç–∞—Ç—É—Å: {status}")
    await message.answer("\n\n".join(lines))

@router.message(lambda m: m.text == "üßæ –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def send_ref_link(message: Message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/YourBotUsername?start=ref_{user_id}"  # –ó–∞–º–µ–Ω–∏—Ç—å YourBotUsername –Ω–∞ –∏–º—è –±–æ—Ç–∞
    count_invited = len(referrals.get(str(user_id), []))
    await message.answer(
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_invited}"
    )

@router.message(Command("cancel"))
async def cmd_cancel(message: Message):
    chat_id = message.chat.id
    if chat_id in feedback_waiting:
        feedback_waiting.remove(chat_id)
        await message.answer("–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω.")
    elif chat_id in order_steps:
        order_steps.pop(chat_id)
        order_data.pop(chat_id, None)
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@router.message(F.text)
async def handle_text(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.strip()

    if chat_id in feedback_waiting:
        feedback_waiting.remove(chat_id)
        feedbacks.append({
            "user": message.from_user.username or "–ë–µ–∑_–Ω–∏–∫–∞",
            "text": text,
            "status": "pending"
        })
        save_all()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_feedback:{len(feedbacks)-1}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_feedback:{len(feedbacks)-1}")
            ]
        ])
        await bot.send_message(ADMIN_ID, f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ—Ç @{message.from_user.username or '–ë–µ–∑_–Ω–∏–∫–∞'}:\n\n{text}", reply_markup=keyboard)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        return

    if chat_id in order_steps:
        step = order_steps[chat_id]

        if step == 0:
            order_data[chat_id]['description'] = text
            order_steps[chat_id] = 1
            await message.answer("üìã –®–∞–≥ 2/4: –£–∫–∞–∂–∏ —Å—É–º–º—É (—á–∏—Å–ª–æ–º)")
            return

        elif step == 1:
            if not text.isdigit():
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
                return
            order_data[chat_id]['amount'] = int(text)
            order_steps[chat_id] = 2
            await message.answer("üìã –®–∞–≥ 3/4: –û—Ç –∫–æ–≥–æ –∑–∞–∫–∞–∑?")
            return

        elif step == 2:
            order_data[chat_id]['from_whom'] = text
            order_steps[chat_id] = 3
            await message.answer("üìã –®–∞–≥ 4/4: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –Ω–∞–ø–∏—à–∏ '-' )")
            return

        elif step == 3:
            order_data[chat_id]['profile_link'] = text
            order_id = f"{user_id}_{message.message_id}"
            orders[order_id] = {
                'from_id': user_id,
                'data': order_data[chat_id],
                'status': '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è'
            }
            save_all()

            order_text = (
                f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or '–ë–µ–∑_–Ω–∏–∫–∞'}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {order_data[chat_id]['description']}\n"
                f"–°—É–º–º–∞: {order_data[chat_id]['amount']}\n"
                f"–û—Ç –∫–æ–≥–æ: {order_data[chat_id]['from_whom']}\n"
                f"–ü—Ä–æ—Ñ–∏–ª—å: {order_data[chat_id]['profile_link']}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}")
                ]
            ])

            await bot.send_message(ADMIN_ID, order_text, reply_markup=keyboard)
            await bot.send_message(LOG_CHANNEL_ID, f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n{order_text}")
            await message.answer("üì® –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–∞—Ä–∞–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            order_steps.pop(chat_id)
            order_data.pop(chat_id, None)
            return

@router.callback_query(F.data.startswith("accept:"))
async def handle_accept(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    order = orders.get(order_id)
    if not order:
        await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    order['status'] = '–ü—Ä–∏–Ω—è—Ç'
    save_all()

    await bot.send_message(order['from_id'], "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≥–∞—Ä–∞–Ω—Ç–æ–º: @Dio_Brando_Za_Warudo")
    await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.")
    await bot.send_message(LOG_CHANNEL_ID, f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –ø—Ä–∏–Ω—è—Ç.")
    await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑.")

@router.callback_query(F.data.startswith("reject:"))
async def handle_reject(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    order = orders.get(order_id)
    if not order:
        await callback
