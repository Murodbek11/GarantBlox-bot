import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime

# === CONFIG ===
TOKEN = '7377520849:AAEWXWJsuSl03352ZB2M7rJGEEtpg8EU0qw'
OWNER_ID = 1725224593
REVIEW_CHANNEL_ID = -1002567963097

# === SETUP ===
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# === DATABASE SETUP ===
conn = sqlite3.connect('bot_data.db', check_same_thread=False)
c = conn.cursor()

c.execute("CREATE TABLE IF NOT EXISTS stats (id INTEGER PRIMARY KEY, reviews INTEGER, completed_orders INTEGER)")
c.execute("INSERT OR IGNORE INTO stats (id, reviews, completed_orders) VALUES (1, 0, 0)")

c.execute("CREATE TABLE IF NOT EXISTS orders (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, description TEXT, start_time TEXT, status TEXT, taken_by INTEGER)")

c.execute("CREATE TABLE IF NOT EXISTS admins (user_id INTEGER PRIMARY KEY)")
c.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (OWNER_ID,))

conn.commit()

class ReviewState(StatesGroup):
    waiting_for_review = State()

class OrderState(StatesGroup):
    waiting_for_description = State()

def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")
    kb.add("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤")
    kb.add("üìÆ –°–≤—è–∑–∞—Ç—å—Å—è —Å –≥–∞—Ä–∞–Ω—Ç–æ–º")
    return kb

def admin_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìë –û–±–Ω—É–ª–∏—Ç—å –æ—Ç–∑—ã–≤—ã", "üìë –û–±–Ω—É–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã")
    kb.add("‚ûñ -1 –æ—Ç–∑—ã–≤", "‚ûñ -1 –∑–∞–∫–∞–∑")
    kb.add("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/start")
    return kb

def is_admin(user_id: int) -> bool:
    c.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    return c.fetchone() is not None

def update_stat(field: str, value: int):
    c.execute(f"UPDATE stats SET {field} = {field} + ? WHERE id = 1", (value,))
    conn.commit()

def get_stats():
    c.execute("SELECT reviews, completed_orders FROM stats WHERE id = 1")
    return c.fetchone()

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    kb = admin_keyboard() if is_admin(message.from_user.id) else main_keyboard()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb)

@dp.message_handler(commands=["admin"])
async def cmd_admin(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return
    try:
        new_admin_id = int(message.get_args())
        c.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (new_admin_id,))
        conn.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_admin_id} –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin <user_id>")

@dp.message_handler(commands=["unadmin"])
async def cmd_unadmin(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return
    try:
        admin_id = int(message.get_args())
        if admin_id == OWNER_ID:
            await message.answer("‚ùó –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
            return
        c.execute("DELETE FROM admins WHERE user_id = ?", (admin_id,))
        conn.commit()
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
    except Exception:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unadmin <user_id>")

@dp.message_handler(lambda m: m.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_review(message: types.Message):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await ReviewState.waiting_for_review.set()

@dp.message_handler(state=ReviewState.waiting_for_review)
async def save_review(message: types.Message, state: FSMContext):
    user_info = f"ID: <code>{message.from_user.id}</code>\nUsername: @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}"
    review_text = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n\n{message.text}\n\nüì¢ {user_info}"
    await bot.send_message(REVIEW_CHANNEL_ID, review_text, parse_mode="HTML")
    update_stat("reviews", 1)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=main_keyboard())
    await state.finish()

@dp.message_handler(lambda m: m.text == "üìä –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤")
async def examples(message: types.Message):
    await message.answer("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è. –û—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!")

@dp.message_handler(lambda m: m.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")
async def ask_order(message: types.Message):
    await message.answer("üìã –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:")
    await OrderState.waiting_for_description.set()

@dp.message_handler(state=OrderState.waiting_for_description)
async def handle_order(message: types.Message, state: FSMContext):
    description = message.text
    if len(description) < 1:
        await message.answer("‚ùó –û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º.")
        return
    c.execute("INSERT INTO orders (user_id, description, status) VALUES (?, ?, 'new')", (message.from_user.id, description))
    conn.commit()
    order_id = c.lastrowid
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{order_id}")
    )
    c.execute("SELECT user_id FROM admins")
    for (admin_id,) in c.fetchall():
        await bot.send_message(admin_id, f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç @{message.from_user.username or message.from_user.id}:\n{description}", reply_markup=keyboard)
    await message.answer("‚åõ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_keyboard())
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("accept_"))
async def accept_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    c.execute("SELECT status, user_id FROM orders WHERE id = ?", (order_id,))
    row = c.fetchone()
    if not row or row[0] != "new":
        await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return
    now = datetime.now().isoformat()
    c.execute("UPDATE orders SET status = 'accepted', start_time = ?, taken_by = ? WHERE id = ?", (now, callback.from_user.id, order_id))
    conn.commit()
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω.", reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}"),
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{order_id}")
    ))
    try:
        await bot.send_message(row[1], f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –≥–∞—Ä–∞–Ω—Ç–æ–º.")
    except Exception:
        pass
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("decline_"))
async def decline_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    c.execute("SELECT status, user_id FROM orders WHERE id = ?", (order_id,))
    row = c.fetchone()
    if not row or row[0] != "new":
        await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return
    c.execute("UPDATE orders SET status = 'declined' WHERE id = ?", (order_id,))
    conn.commit()
    await callback.message.edit_reply_markup()
    try:
        await bot.send_message(row[1], f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    except Exception:
        pass
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@dp.callback_query_handler(lambda c: c.data.startswith("cancel_"))
async def cancel_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    c.execute("SELECT start_time, taken_by, user_id FROM orders WHERE id = ? AND status = 'accepted'", (order_id,))
    result = c.fetchone()
    if result and result[1] == callback.from_user.id:
        duration = datetime.now() - datetime.fromisoformat(result[0])
        c.execute("UPDATE orders SET status = 'cancelled' WHERE id = ?", (order_id,))
        conn.commit()
        await callback.message.answer(f@dp.callback_query_handler(lambda c: c.data.startswith("cancel_"))
async def cancel_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    c.execute("SELECT start_time, taken_by, user_id FROM orders WHERE id = ? AND status = 'accepted'", (order_id,))
    result = c.fetchone()
    if result and result[1] == callback.from_user.id:
        duration = datetime.now() - datetime.fromisoformat(result[0])
        c.execute("UPDATE orders SET status = 'cancelled' WHERE id = ?", (order_id,))
        conn.commit()
        await callback.message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(duration).split('.')[0]}")
        try:
            await bot.send_message(result[2], f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º.")
        except Exception:
            pass
        await callback.message.edit_reply_markup()
        await callback.answer()
    else:
        await callback.answer("‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith("done_"))
async def done_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    c.execute("SELECT start_time, taken_by, user_id FROM orders WHERE id = ? AND status = 'accepted'", (order_id,))
    result = c.fetchone()
    if result and result[1] == callback.from_user.id:
        duration = datetime.now() - datetime.fromisoformat(result[0])
        c.execute("UPDATE orders SET status = 'done' WHERE id = ?", (order_id,))
        update_stat("completed_orders", 1)
        conn.commit()
        await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(duration).split('.')[0]}")
        try:
            await bot.send_message(result[2], f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
        except Exception:
            pass
        await callback.message.edit_reply_markup()
        await callback.answer()
    else:
        await callback.answer("‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.", show_alert=True)

@dp.message_handler(lambda m: m.text == "üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: types.Message):
    reviews, completed = get_stats()
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–û—Ç–∑—ã–≤—ã: {reviews}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed}")

@dp.message_handler(lambda m: m.text == "üìÆ –°–≤—è–∑–∞—Ç—å—Å—è —Å –≥–∞—Ä–∞–Ω—Ç–æ–º")
async def contact(message: types.Message):
    await message.answer("üìû –°–≤—è–∑—å —Å –≥–∞—Ä–∞–Ω—Ç–æ–º:\nTelegram: @GarantBlox")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)