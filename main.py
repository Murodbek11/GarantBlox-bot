import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
from aiogram import Router

TOKEN = "7377520849:AAF_v_w_u2f8NiITaNTMCJzEIHpFStYZPJc"

CHANNEL_ID = -1002567963097       # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª @GarantBlox
LOG_CHANNEL_ID = -1002664591140   # –õ–æ–≥-–∫–∞–Ω–∞–ª @GarantBlox_logs
ADMIN_ID = 1725224593  # Telegram user_id –≥–∞—Ä–∞–Ω—Ç–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

orders = {}
feedbacks = {}
user_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–µ–º –∑–∞–∫–∞–∑)

# –í–µ–±-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤–æ–π
async def handle(request):
    return web.Response(text="I'm alive!")

app = web.Application()
app.add_routes([web.get("/", handle)])

@router.message(Command("start"))
async def start(message: Message):
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    keyboard.add(types.KeyboardButton(text="üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É.",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

@router.message(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_feedback(message: Message):
    user_states[message.from_user.id] = "feedback"
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –∏ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

@router.message(lambda message: message.text == "üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É")
async def ask_order(message: Message):
    user_states[message.from_user.id] = "order"
    example = (
        "üìã –û–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —É –≥–∞—Ä–∞–Ω—Ç–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞:\n"
        "–Ø ‚Äî –≥–∞—Ä–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n"
        "–û–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–ª–∏ –ø–æ–º–æ—á—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ü–æ–º–æ—â—å —Å –æ–±–º–µ–Ω–æ–º\n"
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞\n"
        "- –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\n"
        "–£–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏ –∏ –∂–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏."
    )
    await message.answer(example)

@router.message(F.text)
async def handle_text(message: Message):
    state = user_states.get(message.from_user.id)

    if not state:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
        return

    if state == "feedback":
        feedback_id = f"{message.chat.id}_{message.message_id}"
        feedbacks[feedback_id] = {
            'from_id': message.from_user.id,
            'text': message.text,
            'username': message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
        }

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_feedback:{feedback_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_feedback:{feedback_id}")
            ]
        ])

        await bot.send_message(
            LOG_CHANNEL_ID,
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}:\n\n{message.text}",
            reply_markup=keyboard
        )
        await message.answer("üì® –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        user_states.pop(message.from_user.id, None)

    elif state == "order":
        order_id = f"{message.chat.id}_{message.message_id}"
        orders[order_id] = {
            'from_id': message.from_user.id,
            'text': message.text,
            'username': message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
        }

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_order:{order_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_order:{order_id}")
            ]
        ])

        await bot.send_message(
            ADMIN_ID,
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{orders[order_id]['username']}:\n\n{message.text}",
            reply_markup=keyboard
        )
        await message.answer("üì® –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–∞—Ä–∞–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        user_states.pop(message.from_user.id, None)

@router.callback_query(F.data.startswith("accept_order:"))
async def handle_accept_order(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    order = orders.get(order_id)
    if not order:
        await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await bot.send_message(order['from_id'], "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≥–∞—Ä–∞–Ω—Ç–æ–º: @Dio_Brando_Za_Warudo")
    await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.")
    await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑.")

@router.callback_query(F.data.startswith("reject_order:"))
async def handle_reject_order(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    order = orders.get(order_id)
    if not order:
        await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await bot.send_message(order['from_id'], "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.")
    await callback.message.edit_text(callback.message.text + "\n\n‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑.")

@router.callback_query(F.data.startswith("approve_feedback:"))
async def handle_approve_feedback(callback: CallbackQuery):
    feedback_id = callback.data.split(":")[1]
    feedback = feedbacks.get(feedback_id)
    if not feedback:
        await callback.answer("‚õî –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = feedback.get('text', '')
    username = feedback.get('username', '–ë–µ–∑ –Ω–∏–∫–∞')

    await bot.send_message(CHANNEL_ID, f"üìù –û—Ç–∑—ã–≤ –æ—Ç @{username}:\n\n{text}")
    await callback.message.edit_text(f"‚úÖ –û—Ç–∑—ã–≤ –æ—Ç @{username} –æ–¥–æ–±—Ä–µ–Ω.")
    await callback.answer("–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω.")

@router.callback_query(F.data.startswith("reject_feedback:"))
async def handle_reject_feedback(callback: CallbackQuery):
    feedback_id = callback.data.split(":")[1]
    feedback = feedbacks.get(feedback_id)
    if not feedback:
        await callback.answer("‚õî –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    username = feedback.get('username', '–ë–µ–∑ –Ω–∏–∫–∞')

    await bot.send_message(feedback['from_id'], "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.")
    await callback.message.edit_text(f"‚ùå –û—Ç–∑—ã–≤ –æ—Ç @{username} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.answer("–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

async def main():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    print("Webserver started at http://0.0.0.0:8080")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
