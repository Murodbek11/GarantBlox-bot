import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
from aiogram import Router

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"
CHANNEL_ID = '@GarantBlox'  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
ADMIN_ID = 1725224593  # Telegram user_id –≥–∞—Ä–∞–Ω—Ç–∞

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)
router = Router()
dp.include_router(router)

orders = {}
feedback_waiting = set()  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫—Ç–æ –ø–∏—à–µ—Ç –æ—Ç–∑—ã–≤

async def handle(request):
    return web.Response(text="I'm alive!")

app = web.Application()
app.add_routes([web.get("/", handle)])

@router.message(Command("start"))
async def start(message: Message):
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(types.KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    keyboard.add(types.KeyboardButton(text="üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É.",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

@router.message(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_feedback(message: Message):
    feedback_waiting.add(message.chat.id)
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –∏ –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")

@router.message(lambda message: message.text == "üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≥–∞—Ä–∞–Ω—Ç—É")
async def ask_order(message: Message):
    await message.answer("üìã –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —É –≥–∞—Ä–∞–Ω—Ç–∞.")

@router.message(Command("command2"))
async def send_channel(message: Message):
    await message.answer(f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_ID}")

@router.message(F.text)
async def handle_text(message: Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    if message.chat.id in feedback_waiting:
        await bot.send_message(
            CHANNEL_ID,
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or '–ë–µ–∑_–Ω–∏–∫–∞'}:\n\n{message.text}"
        )
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
        feedback_waiting.remove(message.chat.id)
        return

    if message.reply_to_message:
        return

    if message.text.startswith("üìã") or message.text.startswith("‚úçÔ∏è"):
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
    order_id = f"{message.chat.id}_{message.message_id}"
    orders[order_id] = {
        'from_id': message.from_user.id,
        'text': message.text
    }

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}")
        ]
    ])

    await bot.send_message(
        ADMIN_ID,
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or '–ë–µ–∑_–Ω–∏–∫–∞'}:\n\n{message.text}",
        reply_markup=keyboard
    )
    await message.answer("üì® –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–∞—Ä–∞–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

@router.callback_query(F.data.startswith("accept:"))
async def handle_accept(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    order = orders.get(order_id)
    if not order:
        await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await bot.send_message(order['from_id'], "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≥–∞—Ä–∞–Ω—Ç–æ–º: @Dio_Brando_Za_Warudo")
    await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.")
    await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑.")

@router.callback_query(F.data.startswith("reject:"))
async def handle_reject(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    order = orders.get(order_id)
    if not order:
        await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await bot.send_message(order['from_id'], "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.")
    await callback.message.edit_text(callback.message.text + "\n\n‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑.")

async def main():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    print("Webserver started at http://0.0.0.0:8080")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
