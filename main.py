import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
from aiogram import Router

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7377520849:AAE90iBIivs3iExzl1mm6QxwTt0MYDSG08I"  # ‚ùó –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–∑–∂–µ
CHANNEL_ID = -1002567963097       # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª @GarantBlox
LOG_CHANNEL_ID = -1002664591140   # –õ–æ–≥-–∫–∞–Ω–∞–ª @GarantBlox_logs
ADMIN_ID = 1725224593             # Telegram user_id –≥–∞—Ä–∞–Ω—Ç–∞

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === –í–†–ï–ú–ï–ù–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï ===
orders = {}
feedbacks = {}

# === –í–ï–ë-–•–ï–ù–î–õ–ï–† (–¥–ª—è Render –∏–ª–∏ UptimeRobot) ===
async def handle(request):
    return web.Response(text="OK")

# === –°–¢–ê–†–¢-–ö–û–ú–ê–ù–î–ê ===
@router.message(Command("start"))
async def start_handler(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.add(types.KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
    kb.add(types.KeyboardButton(text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–ê ===
@router.message(F.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def order_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:")
    orders[message.from_user.id] = {"stage": "waiting_for_details"}

# === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–ï–ô –ó–ê–ö–ê–ó–ê ===
@router.message(lambda msg: msg.from_user.id in orders and orders[msg.from_user.id]["stage"] == "waiting_for_details")
async def order_details_handler(message: Message):
    order_text = message.text
    orders.pop(message.from_user.id)

    await bot.send_message(
        LOG_CHANNEL_ID,
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'}:\n\n{order_text}"
    )

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≥–∞—Ä–∞–Ω—Ç–∞.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ó–´–í–ê ===
@router.message(F.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def feedback_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    feedbacks[message.from_user.id] = True

# === –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–ó–´–í–ê ===
@router.message(lambda msg: msg.from_user.id in feedbacks)
async def save_feedback_handler(message: Message):
    feedback_text = message.text
    feedbacks.pop(message.from_user.id)

    await bot.send_message(
        LOG_CHANNEL_ID,
        f"üåü –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'}:\n\n{feedback_text}"
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    app = web.Application()
    app.router.add_get("/", handle)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=8080)
    await site.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
