
import asyncio
from aiogram import Bot, Dispatcher, types
from aiohttp import web

TOKEN = "7377520849:AAFKMxzbjJfQfSc-SWI0QAFG7JzYWcax8bQ"
CHANNEL_ID = '@GarantBlox'

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í–µ–±-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤–æ–π
async def handle(request):
    return web.Response(text="I'm alive!")

app = web.Application()
app.add_routes([web.get("/", handle)])

@dp.message(commands=["start"])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∞ GarantBlox.",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_feedback(message: types.Message):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –∏ –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")

@dp.message()
async def handle_feedback(message: types.Message):
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤.")
        return
    username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ @"
    text = f"""üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {username}:

{message.text}"""
    await bot.send_message(CHANNEL_ID, text)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")

async def main():
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    await dp.start_polling(bot)

async def start_web_app():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    print("Webserver started at http://0.0.0.0:8080")

async def main_runner():
    await asyncio.gather(start_web_app(), main())

if __name__ == "__main__":
    asyncio.run(main_runner())
